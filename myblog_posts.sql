-- MySQL dump 10.13  Distrib 8.0.41, for Win64 (x86_64)
--
-- Host: localhost    Database: myblog
-- ------------------------------------------------------
-- Server version	8.0.41

/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!50503 SET NAMES utf8 */;
/*!40103 SET @OLD_TIME_ZONE=@@TIME_ZONE */;
/*!40103 SET TIME_ZONE='+00:00' */;
/*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */;
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;
/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */;

--
-- Table structure for table `posts`
--

DROP TABLE IF EXISTS `posts`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `posts` (
  `id` int NOT NULL AUTO_INCREMENT,
  `title` varchar(255) NOT NULL,
  `description` text NOT NULL,
  `content` longtext NOT NULL,
  `author` varchar(100) NOT NULL,
  `image_url` varchar(255) DEFAULT NULL,
  `createdAt` datetime NOT NULL,
  `updatedAt` datetime NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=23 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `posts`
--

LOCK TABLES `posts` WRITE;
/*!40000 ALTER TABLE `posts` DISABLE KEYS */;
INSERT INTO `posts` VALUES (4,'5 Tips and Tricks To Make Your Life With Next.js 14 Easier','Next.js 14 is a powerful React framework that simplifies the process of building server-rendered React applications. However, with its advanced features and conventions.........','Next.js 14 is a powerful React framework that simplifies the process of building server-rendered React applications. However, with its advanced features and conventions, there can be some confusion and ambiguity for developers, especially those new to the framework. In this blog post, we’ll explore five tips and tricks to help make your life with Next.js 14 easier.\r\n\r\nTip 1: Working with Next.js Images\r\nOne area of confusion is the handling of images in Next.js. The process differs depending on whether you’re working with local or remote images.\r\n\r\nLocal Images\r\nLocal Image in Next.js\r\nFor local images, you don’t need to specify a width and height. Next.js will automatically identify the dimensions. Simply import the image and render it using the `next/image` component.\r\n\r\nimport Image from \"next/image\";\r\nimport localImage from \"public/hoy.png\";\r\nexport default function MyComponent() {\r\n  return <Image src={localImage} alt=\"Local Image\" />;\r\n}\r\nRemote Images\r\n\r\nFor remote images, you need to provide a blur placeholder and specify the width and height to prevent layout shifts. You can use the `placeholder=”blur”` prop to show a blurred version of the image until the full image loads.\r\n\r\nTo generate the blur data URL for remote images, you can use the `sharp` and `placeholder` packages:\r\n\r\nimport Image from \"next/image\";\r\nimport getBase64 from \"./utils/getBase64\";\r\nexport default async function MyComponent() {\r\n  const blurDataUrl = await getBase64(remoteImageUrl);\r\n  return (\r\n    <Image\r\n      src={remoteImageUrl}\r\n      width={600}\r\n      height={600}\r\n      alt=\"Remote Image\"\r\n      placeholder=\"blur\"\r\n      blurDataURL={blurDataUrl}\r\n    />\r\n  );\r\n}\r\nThe `getBase64` utility function fetches the remote image, converts it to an ArrayBuffer, and then generates the base64 representation using the `placeholder` package.\r\n\r\nTip 2: Handling Environment Variables\r\nBe careful when marking environment variables with `next.config.env.NEXT_PUBLIC_*` as these variables will be exposed in the browser and included in the JavaScript bundle. If you have sensitive API keys or secrets, make sure not to prefix them with `NEXT_PUBLIC_`, then they will only be available in a Node.js environment.\r\n\r\nTip 3: Understanding Caching in Next.js\r\n\r\nNext.js caching behavior differs between development and production environments. In development mode, pages are rendered dynamically on every request by default. However, in production mode, Next.js attempts to render pages statically.\r\n\r\nTo control caching in production, you can use the `revalidate` option or mark a page as `dynamic` explicitly.\r\n\r\n// Revalidate every 5 seconds\r\nexport const revalidate = 5\r\n// Force dynamic rendering\r\nexport const dynamic = \'force-dynamic\'\r\nTip 4: Fetching Data in Server Components\r\nAvoid using API route handlers solely to fetch data for your server components. Instead, fetch the data directly within the server component. This approach allows Next.js to optimize the caching and reuse of data across multiple server components.\r\n\r\nIf you need to reuse the same fetch logic across multiple components, consider creating a server action in the `server/` directory.\r\n\r\nexport async function getJoke() {\r\n  const res = await fetch(\"https://api.example.com/joke\");\r\n  const data = await res.json();\r\n  if (res.ok) {\r\n    return { success: true, joke: data.joke };\r\n  } else {\r\n    return { error: data.error };\r\n  }\r\n}\r\n// app/page.jsx\r\nimport { getJoke } from \"../server/actions\";\r\nexport default async function Page() {\r\n  const { success, joke, error } = await getJoke();\r\n  if (success) {\r\n    return <div>{joke}</div>;\r\n  } else {\r\n    throw new Error(error);\r\n  }\r\n}\r\nTip 5: Understanding Client and Server Components\r\nBy default, pages in Next.js are server components. You can render client components within server components to add interactivity.\r\n\r\n\"use client\";\r\nimport { useState } from \"react\";\r\nexport default function ClientComponent() {\r\n  const [count, setCount] = useState(0);\r\n  return (\r\n    <div>\r\n      <p>Count: {count}</p>\r\n      <button onClick={() => setCount(count + 1)}>Increment</button>\r\n    </div>\r\n  );\r\n}\r\nChild components rendered within a client component automatically become client components as well, without the need for the `’use client’` directive.\r\n\r\nWhen working with providers (e.g., a theming provider), wrap the children with the provider in your layout, and the children will still be rendered as server components.\r\n\r\n// app/layout.jsx\r\nimport { ThemeProvider } from \"your-theme-library\";\r\nexport default function RootLayout({ children }) {\r\n  return <ThemeProvider>{children}</ThemeProvider>;\r\n}\r\nConclusion\r\nNext.js 14 is a powerful and feature-rich framework that streamlines the development of server-rendered React applications. While it introduces some new concepts and conventions, following the tips and tricks outlined in this blog post should help you navigate through the potential areas of confusion and ambiguity.\r\n\r\nBy understanding how to work with images, handle environment variables, manage caching, fetch data in server components, and differentiate between client and server components, you’ll be better equipped to build robust and efficient applications with Next.js 14.\r\n\r\nRemember, practice and experience are key to mastering any new technology. Don’t hesitate to explore the Next.js documentation, join the community forums, and experiment with the framework’s features to solidify your understanding further.\r\n\r\nSource: https://aryalskanda1.medium.com/5-tips-and-tricks-to-make-your-life-with-next-js-14-easier-f272bb52537e','Sabda Avicenna','/uploads/1746094567427-0_Y7OsGMFaLHfWTz53.webp','2025-04-29 16:14:52','2025-05-01 10:19:36'),(21,'7 skill you must know to call yourself HTML master in 2025','HTML is the backbone of web development, and it\'s not changing anytime soon. Even though HTML is a simple markup language, and you can easily get a reasonable grasp of it.....','HTML is the backbone of web development, and it\'s not changing anytime soon. Even though HTML is a simple markup language, and you can easily get a reasonable grasp of it within a few hours, knowing the nitty-gritty details of HTML is what separates an average developer from a great one!\r\n\r\nHere are 7 HTML skills you should know to become an exceptional developer in 2025.\r\n\r\n1. Semantic HTML\r\nAs Google spits out\r\n\r\nSemantic HTML refers to using HTML elements that clearly define the purpose and meaning of the content they contain, making your website code more understandable for both humans and machines. This is important because it enhances readability, accessibility, and search engine optimization (SEO).\r\n\r\nThough picking up Semantic HTML is a tad difficult for beginners, once you get the hang of things, using Semantic HTML becomes almost unconscious.\r\n\r\nCommon Semantic HTML Tags are:\r\n\r\nsection: The section tag groups the content into different sections.\r\nheader: The header tag is used to define the header for a document\r\nnav: The nav element defines a set of navigation links.\r\nfooter: Just like the header, the footer tag is used to define the footer for a document\r\naside: The aside element defines some content aside from the main content (eg: placed in a sidebar).\r\nmain: The main element specifies the main content of the document\r\nHere\'s an example of how to use Semantic HTML:\r\n\r\n<header>\r\n  <img src=\"brand-logo.png\" />\r\n</header>\r\n\r\n<aside>\r\n  <nav>\r\n    <a href=\"#sec-1\">Section 1</a>\r\n    <a href=\"#sec-2\">Section 2</a>\r\n  </nav>\r\n</aside>\r\n\r\n<main>\r\n  <section id=\"sec-1\">\r\n    <h1>Section 1</h1>\r\n    <p>\r\n      Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed do eiusmod\r\n      tempor incididunt ut labore et dolore magna aliqua.\r\n    </p>\r\n  </section>\r\n  <section id=\"sec-2\">\r\n    <h1>Section 2</h1>\r\n    <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit.</p>\r\n  </section>\r\n</main>\r\n\r\n<footer>\r\n  <nav>\r\n    <a href=\"http://ext-1.com\">External Link 1</a>\r\n    <a href=\"http://ext-2.com\">External Link 2</a>\r\n  </nav>\r\n</footer>\r\n\r\n2. Lazy loading assets\r\nLazy loading is a technique that defers the loading of non-essential resources at the point the page is initially loaded. Deferring the loading of images and videos can significantly improve the initial load speed of your website.\r\n\r\nOne important note - you should only lazy load images and videos that are below the fold (fancy term for elements that are not visible in the viewport when the page is loaded, you have to manually scroll down to view the elements that are below the fold). Lazy loading of images and videos that are above the fold (ie: visible on visiting the website) can lead to a poor user experience as the user will have to wait for the images and videos to load after the page is loaded.\r\n\r\nHere\'s an example of how to lazy load images and videos:\r\n\r\n<!-- image -->\r\n<img src=\"image.png\" loading=\"lazy\" />\r\n\r\n<!-- video -->\r\n<video preload=\"none\">\r\n  <source src=\"video.mp4\" type=\"video/mp4\" />\r\n</video>\r\n\r\n3. Preloading assets\r\nThis is the opposite of lazy loading. Preloading is a technique that allows you to load essential resources before the page is fully loaded. This can significantly improve the performance of your website, especially for resources that are critical for rendering the page.\r\n\r\nThe most common use case for preloading is to load up content that is above the fold (ie: visible on visiting the website).\r\n\r\nHere\'s an example of how to preload images - the tag should be placed in the <head> section of your HTML document:\r\n\r\n<link rel=\"preload\" href=\"https://example.com/asset.png\" as=\"image\" />\r\nFor videos, you can reuse the preload attribute in the <video> tag:\r\n\r\n<video preload=\"auto\">\r\n  <source src=\"video.mp4\" type=\"video/mp4\" />\r\n</video>\r\n\r\n4. Custom link previews\r\nEver wondered how WhatsApp shows a preview of the link you are sharing? It\'s as simple as slapping in a few tags in the <head> section of your HTML document.\r\n\r\nWhatsApp (& other platforms from Meta) uses the Open Graph protocol (og) to generate link previews, whereas Twitter uses the Twitter Card protocol. You can (& should) use both protocols to generate link previews for your website.\r\n\r\nThis is what I use for my portfolio:\r\n\r\n<!-- Basic meta tags -->\r\n<meta\r\n  name=\"description\"\r\n  content=\"I am Tapajyoti Bose, a 5-Star & Top Rated Freelance Frontend Web Developer specializing in React. This is my portfolio.\"\r\n/>\r\n<meta name=\"image\" content=\"/card-image.png\" />\r\n<meta name=\"thumbnail\" content=\"/card-image.png\" />\r\n<meta name=\"title\" content=\"Tapajyoti Bose: Personal Portfolio\" />\r\n\r\n<!-- Twitter -->\r\n<meta name=\"twitter:card\" content=\"summary\" />\r\n<meta\r\n  name=\"twitter:description\"\r\n  content=\"I am Tapajyoti Bose, a 5-Star & Top Rated Freelance Frontend Web Developer specializing in React. This is my personal portfolio.\"\r\n/>\r\n<meta name=\"twitter:image\" content=\"/card-image.png\" />\r\n<meta name=\"twitter:title\" content=\"Tapajyoti Bose: Personal Portfolio\" />\r\n\r\n<!-- Open Graph (Facebook, Whatsapp, Instagram, Pinterest, etc) -->\r\n<meta\r\n  property=\"og:description\"\r\n  content=\"I am Tapajyoti Bose, a 5-Star & Top Rated Freelance Frontend Web Developer specializing in React. This is my personal portfolio.\"\r\n/>\r\n<meta property=\"og:image\" content=\"/card-image.png\" />\r\n<meta property=\"og:site_name\" content=\"Tapajyoti Bose\" />\r\n<meta property=\"og:title\" content=\"Tapajyoti Bose: Personal Portfolio\" />\r\n<meta property=\"og:type\" content=\"website\" />\r\n<meta property=\"og:url\" content=\"https://tapajyoti-bose.vercel.app/\" />\r\nThere are hundreds of meta tag generators available online, but I found Meta Tags to be the best one so far.\r\n\r\n5. Make a call or send an email\r\nThese days, most devices (including laptops & desktops) allow you to place calls. You can use the tel: links to make a call from your device simply using HTML.\r\n\r\nIf you want to send an email, mailto: links got your back! It will open the default email client on the user\'s device and pre-fill the recipient\'s email address.\r\n\r\nHere\'s an example of how to use tel: and mailto: links:\r\n\r\n<a href=\"tel:+919876543210\">Call someone</a>\r\n<a href=\"mailto:user@email.com\">Send an email</a>\r\n\r\n6. Responsive images\r\nEver run into a slow website that takes ages to fully load due to humongous images? Well, you can avoid that in your next awesome website by using responsive images.\r\n\r\nArt Direction is an incredible optimization technique that saves a huge amount of bandwidth by loading the optimally sized images based on some media queries.\r\n\r\n<picture>\r\n  <source media=\"(max-width: 1200px)\" srcset=\"link-to-img\" />\r\n  <source media=\"(max-width: 2560px)\" srcset=\"link-to-img@2x\" />\r\n  <source media=\"(min-width: 2560px)\" srcset=\"link-to-imgl@3x\" />\r\n  <img src=\"link-to-img@3x\" />\r\n</picture>\r\nIn the example above, the browser will load the required image based on the media query that matches the user\'s device. This is a great way to optimize the load time of your website for different devices and screen sizes.\r\n\r\n7. Preformatted text\r\nAre you building an app where the text formatting a user enters needs to be preserved, but HTML keeps reverting to the default formatting?\r\nFret not my friend, all you need to do is wrap the content with a <pre> tag to preserve the formatting of the text. Text in a pre element is displayed in a fixed-width font by default (does allow manual styling), and the text preserves both spaces and line breaks.\r\n\r\n<pre>\r\nLorem\r\n\r\n Ipsum   dolor sit             amet.\r\n</pre>\r\n\r\nThanks for reading!\r\nSource: https://dev.to/ruppysuppy/7-skill-you-must-know-to-call-yourself-html-master-in-2025-199e','Sabda Avicenna','/uploads/1746094289246-https___dev-to-uploads.s3.amazonaws.com_uploads_articles_zrfq9dgr16bkfpfem7yp.webp','2025-04-30 16:57:52','2025-05-01 10:57:30'),(22,'TypeScript to Go: The Real Reasons Behind the 10 Times TypeScript','In-Depth Exploration of Migrating TypeScript to Go: Decisions, Advantages, and Future Prospects.','I. Project Background and Origin\r\n(I) The Origin of the Project Code Name\r\nThe code name of the new TypeScript migration project is Corsa. The old codebase, Strata, was once the initial code name of TypeScript, which began in the internal development stage at the end of 2010 or the beginning of 2011. The initial team consisted of Steve Lucco, Anders Hejlsberg, and Luke. Steve wrote the original prototype compiler, extracting and modifying the scanner and parser from the JavaScript engine of Internet Explorer. It was a C# codebase used for the proof of concept.\r\n\r\n(II) Performance Issues Driving the Change\r\nIn the ECMAScript community, it is a trend to migrate highly tool-dependent projects to native code, such as esbuild and swc. TypeScript faces performance and scalability issues. As the project keeps growing, the compiler exerts more pressure on the V8 and JavaScript engines. The startup time becomes longer due to the addition of new features. Previous optimizations could only bring a 5% - 10% improvement, reaching the limit of performance optimization.\r\n\r\nII. Reasons for Choosing the Go Language\r\n(I) Comparison with the Rust Language\r\nMemory Management and Compatibility: The existing TypeScript codebase assumes the existence of automatic garbage collection. However, the memory management in Rust is not automatic. Its borrow checker has strict constraints on the ownership of data structures and prohibits cyclic data structures. TypeScript\'s data structures, such as the Abstract Syntax Tree (AST), make extensive use of circular references. Migrating to Rust requires redesigning the data structures, which adds great difficulty. Therefore, Rust is basically ruled out.\r\nDeveloper Experience and Learning Cost: It is easier to transition from JavaScript to Go than to Rust. In some aspects, Go code is similar to JavaScript code. When dealing with complex or recursive structures in Rust, it is more difficult to understand the evolution process from TypeScript code. From the perspective of human resources, choosing Go has more advantages.\r\n(II) Comparison with the C# Language\r\nLanguage Design Orientation: Go is a language that gives more priority to native code. It has the function of automatic garbage collection and is more expressive in terms of data structure layout and inline structures. C# is somewhat bytecode-oriented. Although it has ahead-of-time compilation, it is not available on all platforms, and it was not designed with native performance optimization as the goal from the beginning.\r\nDifferences in Programming Paradigms: The JavaScript codebase of TypeScript adopts a highly functional programming style, and the core compiler rarely uses classes. Go also focuses on functions and data structures. In contrast, C# is mainly object-oriented programming (OOP). Migrating to C# requires switching the programming paradigm, which increases the migration friction.\r\n(III) The Advantageous Fit of the Go Language\r\nThe Go language can provide excellently optimized native code on all mainstream platforms. It has good expressive ability for data structures, allowing cyclic data structures and inline data structures. It has the capabilities of automatic garbage collection and concurrent access to shared memory, as well as a good toolchain and excellent support from VS Code and other tools. It meets the multi-faceted needs of the TypeScript migration and stands out among many languages.\r\n\r\nIII. Challenges Faced by the Project and Solutions\r\n(I) The Trade-off of Giving Up Bootstrapping\r\nA bootstrapping language is a language written in itself. TypeScript was previously a bootstrapping language. There are concerns about giving up bootstrapping after migrating to Go, but for a 10-fold performance improvement, the team still chooses to migrate. However, some parts written in JavaScript will be retained, such as the language service part. The team is exploring solutions for building an API between the native part (Go) and consumers of other languages.\r\n\r\n(II) Efforts to Ensure Compatibility\r\nTypeScript does not have an official specification, and the reference implementation is similar to a specification. When migrating to Go, it is necessary to maintain semantic consistency. The team\'s goal is 99.99% compatibility and hopes to produce exactly the same errors for the same codebase. Currently, the open-source compiler can compile and check all of Visual Studio Code, and it can run 20,000 conformance tests without crashing. The team is analyzing the error baseline and eliminating differences, aiming to become a plug-and-play replacement for the old compiler.\r\n\r\n(III) The Problem of Determinacy in Type Sorting\r\nThe old compiler used a simple non-deterministic type sorting method, which was deterministic in a single-threaded environment but non-deterministic in a multi-threaded concurrent environment. The new codebase needs to introduce deterministic type sorting, which leads to different type orders from the old compiler in some cases. Especially, the order of union types is important in some scenarios, and the team is working on solving these problems.\r\n\r\n(IV) The Dilemma of API Design\r\nAlmost all of the internal structure of the compiler in the old codebase was exposed as an API. The new codebase needs to redesign the API and consider ensuring the efficiency of the API during inter-process communication. Currently, the team is exploring how to provide a versionable and modern API for the new codebase.\r\n\r\nIV. The Application and Advantages of Concurrency in the Project\r\n(I) The Functional Programming Foundation of the Compiler Facilitates Concurrency\r\nThe TypeScript compiler originally adopted a functional programming model and made extensive use of immutability to ensure safe sharing. For example, the AST after scanning, parsing, and binding is basically considered immutable. Multiple type checkers can process the same AST simultaneously, which provides a good foundation for concurrent processing, even though JavaScript itself does not have a concurrent mechanism for shared memory.\r\n\r\n(II) The Implementation of Concurrency in the Parsing Stage\r\nThe parsing task is very suitable for parallelization. The parsing work of each source file can be completely independently completed. For example, if there are 5000 source files and 8 CPUs, the files can be divided into eight parts, and each CPU processes a part. In the shared memory space, after completion, the part that builds and links all the data structures is carried out. It is very simple to implement the concurrency of the parsing stage in Go. It probably only requires about 10 lines of code to run the operation in a goroutine, and at the same time, use a mutex to protect the shared resources, which can improve the performance by 3 to 4 times.\r\n\r\n(III) The Concurrency Scheme for the Type Checking Stage\r\nSince the type checker requires a global view of the program, it cannot be completely independent like the parsing process. The team divides the program into several parts (currently hard-coded as four) and creates four type checkers. Each checker checks the assigned part of the files. They share the underlying immutable AST and build their own type states. Although this method will consume about 20% more memory (due to type duplication), it can achieve an additional performance improvement of about 3 times. Combined with the 3-fold performance improvement brought by the native code, the overall performance improvement can reach 10 times.\r\n\r\nV. Prospects for the Future of TypeScript\r\n(I) The Development Trend of Language Features\r\nCurrently, the development speed of ECMAScript has slowed down. Community feedback shows that people are more concerned about scalability and performance rather than new fancy features of the type system. The TypeScript team will pay attention to the work of the ECMAScript committee, properly handle new features in the type system, and at the same time think about the impact of a 10-fold speed increase of the type checker and explore new possibilities.\r\n\r\n(II) The Possibility of Combining with Artificial Intelligence\r\nUse the fast type checker to provide context information for large language models (LLMs), such as type resolution results, symbol declaration locations, etc. Check the output of AI in real-time to ensure its semantic correctness and provide a guarantee for AI to generate safe and reliable code, opening up new development paths.\r\n\r\n(III) The Conception of a Native Runtime\r\nExplore whether a native runtime for TypeScript is possible. Currently, there is Deno written in Rust. Although there are some factors in JavaScript that affect performance, such as the object model and the way of handling numbers, creating a native runtime for TypeScript faces many uncertain factors, and the future development direction is still unclear.\r\n\r\nVI. Third-Party Contributions and Community Impact\r\nThe transition from JavaScript to Go is relatively gentle for the system. Although there are fewer people who know both Go and JavaScript compared to those who only know JavaScript, which may lead to a decrease in the number of contributors, the number of people who contribute to the compiler was originally not large, and they are usually interested in stepping into the native environment. The Go language is simple, and its simple design has brought remarkable results such as a 10-fold performance improvement, which will not hinder the vitality and development of the community.\r\n\r\nSource: https://dev.to/leapcell/typescript-to-go-the-real-reasons-behind-the-10x-typescript-416\r\n','Sabda Avicenna','/uploads/1746093549345-https___dev-to-uploads.s3.amazonaws.com_uploads_articles_27ukllmpfc519gov6w8g.webp','2025-04-30 16:58:17','2025-05-01 11:02:56');
/*!40000 ALTER TABLE `posts` ENABLE KEYS */;
UNLOCK TABLES;
/*!40103 SET TIME_ZONE=@OLD_TIME_ZONE */;

/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;
/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;
/*!40014 SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS */;
/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
/*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */;

-- Dump completed on 2025-05-06 15:37:37
